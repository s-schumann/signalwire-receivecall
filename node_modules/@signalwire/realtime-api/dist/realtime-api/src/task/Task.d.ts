import { DisconnectableClientContract, BaseComponentOptions, ClientContextContract } from '@signalwire/core';
import type { TaskClientApiEvents } from '../types';
import { RealtimeClient } from '../client/index';
export interface Task extends DisconnectableClientContract<Task, TaskClientApiEvents>, ClientContextContract {
    /** @internal */
    _session: RealtimeClient;
    /**
     * Disconnects this client. The client will stop receiving events and you will
     * need to create a new instance if you want to use it again.
     *
     * @example
     *
     * ```js
     * client.disconnect()
     * ```
     */
    disconnect(): void;
}
/** @internal */
export declare const createTaskObject: (params: BaseComponentOptions<TaskClientApiEvents>) => Task;
export * from './TaskClient';
export * from './send';
export type { TaskReceivedEventName } from '@signalwire/core';
export type { TaskClientApiEvents, RealTimeTaskApiEventsHandlerMapping, } from '../types';
//# sourceMappingURL=Task.d.ts.map