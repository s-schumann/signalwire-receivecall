import { BaseComponentOptions, EmitterContract, VoiceCallContract, VoiceCallDisconnectReason, VoicePlaylist, VoiceCallPlayAudioMethodParams, VoiceCallPlaySilenceMethodParams, VoiceCallPlayRingtoneMethodParams, VoiceCallPlayTTSMethodParams, VoiceCallRecordMethodParams, VoiceCallPromptMethodParams, VoiceCallPromptAudioMethodParams, VoiceCallPromptRingtoneMethodParams, VoiceCallPromptTTSMethodParams, EventTransform, VoiceCallTapMethodParams, VoiceCallTapAudioMethodParams, VoiceCallConnectMethodParams, VoiceCallConnectPhoneMethodParams, VoiceCallConnectSipMethodParams, VoiceCallDetectMethodParams, VoiceCallDetectMachineParams, VoiceCallDetectFaxParams, VoiceCallDetectDigitParams, VoiceDialerParams, CallingCallWaitForState } from '@signalwire/core';
import { RealTimeCallApiEvents } from '../types';
import { AutoApplyTransformsConsumer } from '../AutoApplyTransformsConsumer';
import { CallPlayback } from './CallPlayback';
import { CallRecording } from './CallRecording';
import { CallPrompt } from './CallPrompt';
import { CallTap } from './CallTap';
import { CallDetect } from './CallDetect';
declare type EmitterTransformsEvents = 'calling.playback.start' | 'calling.playback.started' | 'calling.playback.updated' | 'calling.playback.ended' | 'calling.recording.started' | 'calling.recording.updated' | 'calling.recording.ended' | 'calling.recording.failed' | 'calling.prompt.started' | 'calling.prompt.updated' | 'calling.prompt.ended' | 'calling.prompt.failed' | 'calling.tap.started' | 'calling.tap.ended' | 'calling.detect.started' | 'calling.detect.ended' | 'calling.call.state' | 'calling.detect.updated' | 'calling.connect.connected';
/**
 * A Call object represents an active call. You can get instances of a Call
 * object from a {@link Voice.Client}, by answering or initiating calls.
 */
export interface Call extends VoiceCallContract<Call>, EmitterContract<RealTimeCallApiEvents> {
}
/**
 * Used to resolve the play() method and to update the CallPlayback object through the EmitterTransform
 */
export declare const callingPlaybackTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the record() method and to update the CallRecording object through the EmitterTransform
 */
export declare const callingRecordTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the prompt() method and to update the CallPrompt object through the EmitterTransform
 */
export declare const callingPromptTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the tap() method and to update the CallTap object through the EmitterTransform
 */
export declare const callingTapTriggerEvent: EmitterTransformsEvents;
/**
 * Used to resolve the detect() method and to update the CallDetect object through the EmitterTransform
 */
export declare const callingDetectTriggerEvent: EmitterTransformsEvents;
export declare class CallConsumer extends AutoApplyTransformsConsumer<RealTimeCallApiEvents> {
    protected _eventsPrefix: "calling";
    callId: string;
    nodeId: string;
    peer: string;
    callState: string;
    constructor(options: BaseComponentOptions<RealTimeCallApiEvents>);
    /** Unique id for this voice call */
    get id(): string;
    get state(): string;
    get tag(): string;
    /** The type of call. Only phone and sip are currently supported. */
    get type(): any;
    /** The phone number that the call is coming from. */
    get from(): any;
    /** The phone number you are attempting to call. */
    get to(): any;
    get headers(): any;
    /** @internal */
    protected getEmitterTransforms(): Map<EmitterTransformsEvents | EmitterTransformsEvents[], EventTransform>;
    dial(params: VoiceDialerParams): Promise<unknown>;
    /**
     * Hangs up the call.
     * @param reason Optional reason for hanging up
     *
     * @example
     *
     * ```js
     * call.hangup();
     * ```
     */
    hangup(reason?: VoiceCallDisconnectReason): Promise<unknown>;
    /**
     * Answers the incoming call.
     *
     * @example
     *
     * ```js
     * client.on('call.received', async (call) => {
     *   try {
     *     await call.answer()
     *     console.log('Inbound call answered')
     *   } catch (error) {
     *     console.error('Error answering inbound call', error)
     *   }
     * })
     * ```
     */
    answer(): Promise<this>;
    /**
     * Play one or multiple media in a Call and waits until the playing has ended.
     *
     * The play method is a generic method for all types of media, see
     * {@link playAudio}, {@link playSilence}, {@link playTTS} or
     * {@link playRingtone} for more specific usages.
     *
     * @param params a media playlist. See {@link Voice.Playlist}.
     *
     * @example
     *
     * ```js
     * await call.play(new Voice.Playlist({ volume: 1.0 }).add(
     *   Voice.Playlist.TTS({
     *     text: 'Welcome to SignalWire! Please enter your 4 digits PIN',
     *   })
     * ))
     * ```
     */
    play(params: VoicePlaylist): Promise<CallPlayback>;
    /**
     * Plays an audio file.
     *
     * @example
     *
     * ```js
     * const playback = await call.playAudio({ url: 'https://cdn.signalwire.com/default-music/welcome.mp3' });
     * await playback.ended();
     * ```
     */
    playAudio(params: VoiceCallPlayAudioMethodParams): Promise<CallPlayback>;
    /**
     * Plays some silence.
     *
     * @example
     *
     * ```js
     * const playback = await call.playSilence({ duration: 3 });
     * await playback.ended();
     * ```
     */
    playSilence(params: VoiceCallPlaySilenceMethodParams): Promise<CallPlayback>;
    /**
     * Plays a ringtone.
     *
     * @example
     *
     * ```js
     * const playback = await call.playRingtone({ name: 'it' });
     * await playback.ended();
     * ```
     */
    playRingtone(params: VoiceCallPlayRingtoneMethodParams): Promise<CallPlayback>;
    /**
     * Plays text-to-speech.
     *
     * @example
     *
     * ```js
     * const playback = await call.playTTS({ text: 'Welcome to SignalWire!' });
     * await playback.ended();
     * ```
     */
    playTTS(params: VoiceCallPlayTTSMethodParams): Promise<CallPlayback>;
    /**
     * Generic method to record a call. Please see {@link recordAudio}.
     */
    record(params: VoiceCallRecordMethodParams): Promise<CallRecording>;
    /**
     * Records the audio from the call.
     *
     * @example
     *
     * ```js
     * const recording = await call.recordAudio({ direction: 'both' })
     * await recording.stop()
     * ```
     */
    recordAudio(params?: VoiceCallRecordMethodParams['audio']): Promise<CallRecording>;
    /**
     * Generic method to prompt the user for input. Please see {@link promptAudio}, {@link promptRingtone}, {@link promptTTS}.
     */
    prompt(params: VoiceCallPromptMethodParams): Promise<CallPrompt>;
    /**
     * Play an audio while collecting user input from the call, such as `digits` or `speech`.
     *
     * @example
     *
     * Prompting for digits and waiting for a result:
     *
     * ```js
     * const prompt = await call.promptAudio({
     *   url: 'https://cdn.signalwire.com/default-music/welcome.mp3',
     *   digits: {
     *     max: 5,
     *     digitTimeout: 2,
     *     terminators: '#*'
     *   }
     * })
     * const { type, digits, terminator } = await prompt.ended()
     * ```
     */
    promptAudio(params: VoiceCallPromptAudioMethodParams): Promise<CallPrompt>;
    /**
     * Play a ringtone while collecting user input from the call, such as `digits` or `speech`.
     *
     * @example
     *
     * Prompting for digits and waiting for a result:
     *
     * ```js
     * const prompt = await call.promptRingtone({
     *   name: 'it',
     *   duration: 10,
     *   digits: {
     *     max: 5,
     *     digitTimeout: 2,
     *     terminators: '#*'
     *   }
     * })
     * const { type, digits, terminator } = await prompt.ended()
     * ```
     */
    promptRingtone(params: VoiceCallPromptRingtoneMethodParams): Promise<CallPrompt>;
    /**
     * Say some text while collecting user input from the call, such as `digits` or `speech`.
     *
     * @example
     *
     * Prompting for digits and waiting for a result:
     *
     * ```js
     * const prompt = await call.promptTTS({
     *   text: 'Please enter your PIN',
     *   digits: {
     *     max: 5,
     *     digitTimeout: 2,
     *     terminators: '#*'
     *   }
     * })
     * const { type, digits, terminator } = await prompt.ended()
     * ```
     */
    promptTTS(params: VoiceCallPromptTTSMethodParams): Promise<CallPrompt>;
    /**
     * Play DTMF digits to the other party on the call.
     *
     * @example
     *
     * ```js
     * await call.sendDigits('123')
     * ```
     */
    sendDigits(digits: string): Promise<unknown>;
    /**
     * Intercept call media and stream it to the specified WebSocket endpoint.
     * Prefer using {@link tapAudio} if you only need to tap audio.
     *
     * @example
     *
     * ```js
     * const tap = await call.tapAudio({
     *   audio: {
     *     direction: 'both',
     *   },
     *   device: {
     *     type: 'ws',
     *     uri: 'wss://example.domain.com/endpoint',
     *   },
     * })
     *
     * await tap.stop()
     * ```
     */
    tap(params: VoiceCallTapMethodParams): Promise<CallTap>;
    /**
     * Intercept call audio and stream it to the specified WebSocket endpoint.
     *
     * @example
     *
     * ```js
     * const tap = await call.tapAudio({
     *   direction: 'both',
     *   device: {
     *     type: 'ws',
     *     uri: 'wss://example.domain.com/endpoint',
     *   },
     * })
     *
     * await tap.stop()
     * ```
     */
    tapAudio(params: VoiceCallTapAudioMethodParams): Promise<CallTap>;
    /**
     * Attempt to connect an existing call to a new outbound call. You can wait
     * until the call is disconnected by calling {@link waitForDisconnected}.
     *
     * This is a generic method that allows you to connect to multiple devices in
     * series, parallel, or combinations of both with the use of a
     * {@link Voice.DeviceBuilder}. For simpler use cases, prefer using
     * {@link connectPhone} or {@link connectSip}.
     *
     * @example
     *
     * Connecting to a new SIP call.
     *
     * ```js
     * const plan = new Voice.DeviceBuilder().add(
     *   Voice.DeviceBuilder.Sip({
     *     from: 'sip:user1@domain.com',
     *     to: 'sip:user2@domain.com',
     *     timeout: 30,
     *   })
     * )
     *
     * const peer = await call.connect(plan)
     * ```
     */
    connect(params: VoiceCallConnectMethodParams): Promise<any>;
    /**
     * Attempt to connect an existing call to a new outbound phone call. You can
     * wait until the call is disconnected by calling {@link waitForDisconnected}.
     *
     * @example
     *
     * ```js
     * const peer = await call.connectPhone({
     *   from: '+xxxxxx',
     *   to: '+yyyyyy',
     *   timeout: 30
     * })
     * ```
     */
    connectPhone({ ringback, ...params }: VoiceCallConnectPhoneMethodParams): Promise<any>;
    /**
     * Attempt to connect an existing call to a new outbound SIP call. You can
     * wait until the call is disconnected by calling {@link waitForDisconnected}.
     *
     * @example
     *
     * ```js
     * const peer = await call.connectPhone({
     *   from: 'sip:user1@domain.com',
     *   to: 'sip:user2@domain.com',
     *   timeout: 30
     * })
     * ```
     */
    connectSip({ ringback, ...params }: VoiceCallConnectSipMethodParams): Promise<any>;
    disconnect(): Promise<void>;
    /**
     * @deprecated use {@link disconnected} instead.
     */
    waitForDisconnected(): () => Promise<void>;
    disconnected(): Promise<this>;
    /**
     * Generic method. Please see {@link amd}, {@link detectFax}, {@link detectDigit}.
     */
    detect(params: VoiceCallDetectMethodParams): Promise<CallDetect>;
    /**
     * Detects the presence of an answering machine.
     *
     * @example
     *
     * ```js
     * const detect = await call.amd()
     * const result = await detect.ended()
     *
     * console.log('Detect result:', result.type)
     * ```
     */
    amd(params?: Omit<VoiceCallDetectMachineParams, 'type'>): Promise<CallDetect>;
    /**
     * Alias for amd()
     */
    detectAnsweringMachine: (params?: Omit<VoiceCallDetectMachineParams, 'type'>) => Promise<CallDetect>;
    /**
     * Detects the presence of a fax machine.
     *
     * @example
     *
     * ```js
     * const detect = await call.detectFax()
     * const result = await detect.ended()
     *
     * console.log('Detect result:', result.type)
     * ```
     */
    detectFax(params?: Omit<VoiceCallDetectFaxParams, 'type'>): Promise<CallDetect>;
    /**
     * Detects digits in the audio stream.
     *
     * @example
     *
     * ```js
     * const detect = await call.detectDigit()
     * const result = await detect.ended()
     *
     * console.log('Detect result:', result.type)
     * ```
     */
    detectDigit(params?: Omit<VoiceCallDetectDigitParams, 'type'>): Promise<CallDetect>;
    /**
     * Returns a promise that is resolved only after the current call is in one of
     * the specified states.
     *
     * @returns true if the requested states have been reached, false if they
     * won't be reached because the call ended.
     *
     * @example
     *
     * ```js
     * await call.waitFor('ended')
     * ```
     */
    waitFor(params: CallingCallWaitForState | CallingCallWaitForState[]): Promise<unknown>;
}
export declare const CallAPI: import("@signalwire/core").ConstructableType<CallConsumer>;
export declare const createCallObject: (params: BaseComponentOptions<EmitterTransformsEvents>) => Call;
export {};
//# sourceMappingURL=Call.d.ts.map