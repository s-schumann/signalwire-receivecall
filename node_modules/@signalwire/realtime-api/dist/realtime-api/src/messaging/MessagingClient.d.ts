import type { UserOptions } from '@signalwire/core';
import type { Messaging } from './Messaging';
export type { MessagingClientApiEvents, RealTimeMessagingApiEventsHandlerMapping, } from '../types';
export type { MessageReceivedEventName, MessageUpdatedEventName, } from '@signalwire/core';
interface MessagingClient extends Messaging {
    new (opts: MessagingClientOptions): this;
}
export interface MessagingClientOptions extends Omit<UserOptions, '_onRefreshToken'> {
}
/**
 * You can use instances of this class to send or receive messages. Please see
 * {@link MessagingClientApiEvents} for the full list of events you can subscribe
 * to.
 *
 * @param params - {@link MessagingClientOptions}
 *
 * @example
 *
 * ```javascript
 * const client = new Messaging.Client({
 *   project: "<project-id>",
 *   token: "<api-token>",
 *   contexts: ['office']
 * })
 *
 * client.on('message.received', (message) => {
 *   console.log('message.received', message)
 * })
 *
 * await client.send({
 *   context: 'office',
 *   from: '+1xxx',
 *   to: '+1yyy',
 *   body: 'Hello World!'
 * })
 * ```
 */
declare const MessagingClient: new (options?: MessagingClientOptions | undefined) => MessagingClient;
export { MessagingClient as Client };
//# sourceMappingURL=MessagingClient.d.ts.map