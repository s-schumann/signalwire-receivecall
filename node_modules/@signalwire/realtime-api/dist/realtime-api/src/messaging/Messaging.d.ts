import { DisconnectableClientContract, BaseComponentOptions, ClientContextContract } from '@signalwire/core';
import type { MessagingClientApiEvents } from '../types';
import { RealtimeClient } from '../client/index';
interface MessagingSendParams {
    context?: string;
    from: string;
    to: string;
    body?: string;
    tags?: string[];
    region?: string;
    media?: string[];
}
export interface MessagingSendResult {
    message: string;
    code: string;
    messageId: string;
}
/** @internal */
export interface Messaging extends DisconnectableClientContract<Messaging, MessagingClientApiEvents>, ClientContextContract {
    /** @internal */
    _session: RealtimeClient;
    /**
     * Disconnects this client. The client will stop receiving events and you will
     * need to create a new instance if you want to use it again.
     *
     * @example
     *
     * ```js
     * client.disconnect()
     * ```
     */
    disconnect(): void;
    /**
     * Send an outbound SMS or MMS message.
     *
     * @param params - {@link MessagingSendParams}
     *
     * @returns - {@link MessagingSendResult}
     *
     * @example
     *
     * > Send a message.
     *
     * ```js
     * try {
     *   const sendResult = await client.send({
     *     from: '+1xxx',
     *     to: '+1yyy',
     *     body: 'Hello World!'
     *   })
     *   console.log('Message ID: ', sendResult.messageId)
     * } catch (e) {
     *   console.error(e.message)
     * }
     * ```
     */
    send(params: MessagingSendParams): Promise<MessagingSendResult>;
}
/** @internal */
export declare const createMessagingObject: (params: BaseComponentOptions<MessagingClientApiEvents>) => Messaging;
export * from './MessagingClient';
export * from './Message';
export type { MessagingMessageState } from '@signalwire/core';
//# sourceMappingURL=Messaging.d.ts.map