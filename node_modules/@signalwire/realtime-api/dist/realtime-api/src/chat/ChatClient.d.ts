import { ChatContract, ConsumerContract, UserOptions, Chat as ChatNamespace } from '@signalwire/core';
import { RealtimeClient } from '../client/index';
import type { RealTimeChatApiEventsHandlerMapping } from '../types/chat';
export interface ChatClientApiEvents extends ChatNamespace.BaseChatApiEvents<RealTimeChatApiEventsHandlerMapping> {
}
export interface ClientFullState extends ChatClient {
}
interface ChatClient extends Omit<ChatContract, 'getAllowedChannels' | 'updateToken'>, Omit<ConsumerContract<ChatClientApiEvents, ClientFullState>, 'subscribe'> {
    new (opts: ChatClientOptions): this;
    /** @internal */
    _session: RealtimeClient;
}
export interface ChatClientOptions extends Omit<UserOptions, 'host' | '_onRefreshToken' | 'token'> {
    token?: string;
}
/**
 * You can use instances of this class to control the chat and subscribe to its
 * events. Please see {@link ChatClientApiEvents} for the full list of events
 * you can subscribe to.
 *
 * @param options - {@link ChatClientOptions}
 *
 * @returns - {@link ChatClient}
 *
 * @example
 *
 * ```javascript
 * const chatClient = new Chat.Client({
 *   project: '<project-id>',
 *   token: '<api-token>'
 * })
 *
 * await chatClient.subscribe([ 'mychannel1', 'mychannel2' ])
 *
 * chatClient.on('message', (message) => {
 *   console.log("Received", message.content,
 *               "on", message.channel,
 *               "at", message.publishedAt)
 * })
 *
 * await chatClient.publish({
 *   channel: 'mychannel1',
 *   content: 'hello world'
 * })
 * ```
 */
declare const ChatClient: new (options?: ChatClientOptions | undefined) => ChatClient;
export { ChatClient as Client };
//# sourceMappingURL=ChatClient.d.ts.map