import { BaseClient, SessionState, ClientContract, ClientEvents } from '@signalwire/core';
import { Video } from './video/Video';
/**
 * A real-time Client.
 *
 * To construct an instance of this class, please use {@link createClient}.
 *
 * Example usage:
 * ```typescript
 * import {createClient} from '@signalwire/realtime-api'
 *
 * // Obtain a client:
 * const client = await createClient({ project, token })
 *
 * // Listen on events:
 * client.video.on('room.started', async (room) => { })
 *
 * // Connect:
 * await client.connect()
 * ```
 * @deprecated It's no longer needed to create the client
 * manually. You can use the product constructors, like
 * Video.Client, to access the same functionality.
 */
export interface RealtimeClient extends ClientContract<RealtimeClient, ClientEvents> {
    /**
     * Connects this client to the SignalWire network.
     *
     * As a general best practice, it is suggested to connect the event listeners
     * *before* connecting the client, so that no events are lost.
     *
     * @returns Upon connection, asynchronously returns an instance of this same
     * object.
     *
     * @example
     * ```typescript
     * const client = await createClient({project, token})
     * client.video.on('room.started', async (roomSession) => { })  // connect events
     * await client.connect()
     * ```
     */
    connect(): Promise<RealtimeClient>;
    /**
     * Disconnects this client from the SignalWire network.
     */
    disconnect(): void;
    /**
     * Access the Video API Consumer
     */
    video: Video;
}
export declare class Client extends BaseClient<ClientEvents> {
    private _consumers;
    onAuth(session: SessionState): Promise<void>;
    get video(): Video;
}
//# sourceMappingURL=Client.d.ts.map