import { BaseComponentOptions, ConsumerContract, RoomSessionRecording, RoomSessionPlayback } from '@signalwire/core';
import type { RealtimeClient } from '../client/Client';
import { RealTimeRoomApiEvents, RealTimeVideoApiEvents, RealTimeVideoApiEventsHandlerMapping, RealTimeRoomApiEventsHandlerMapping } from '../types/video';
import { RoomSession, RoomSessionFullState, RoomSessionUpdated } from './RoomSession';
import type { RoomSessionMember, RoomSessionMemberUpdated } from './RoomSessionMember';
export interface Video extends ConsumerContract<RealTimeVideoApiEvents> {
    /** @internal */
    subscribe(): Promise<void>;
    /** @internal */
    _session: RealtimeClient;
    /**
     * Disconnects this client. The client will stop receiving events and you will
     * need to create a new instance if you want to use it again.
     *
     * @example
     *
     * ```js
     * client.disconnect()
     * ```
     */
    disconnect(): void;
    getRoomSessions(): Promise<{
        roomSessions: RoomSession[];
    }>;
    getRoomSessionById(id: string): Promise<{
        roomSession: RoomSession;
    }>;
}
export type { RealTimeRoomApiEvents, RealTimeRoomApiEventsHandlerMapping, RealTimeVideoApiEvents, RealTimeVideoApiEventsHandlerMapping, RoomSession, RoomSessionFullState, RoomSessionMember, RoomSessionMemberUpdated, RoomSessionPlayback, RoomSessionRecording, RoomSessionUpdated, };
export type { ClientEvents, EmitterContract, EntityUpdated, GlobalVideoEvents, InternalVideoMemberEntity, LayoutChanged, MEMBER_UPDATED_EVENTS, MemberCommandParams, MemberCommandWithValueParams, MemberCommandWithVolumeParams, MemberJoined, MemberLeft, MemberListUpdated, MemberTalking, MemberTalkingEnded, MemberTalkingEventNames, MemberTalkingStart, MemberTalkingStarted, MemberTalkingStop, MemberUpdated, MemberUpdatedEventNames, PlaybackEnded, PlaybackStarted, PlaybackUpdated, RecordingEnded, RecordingStarted, RecordingUpdated, RoomEnded, RoomStarted, RoomSubscribed, RoomUpdated, SipCodec, VideoLayoutEventNames, VideoMemberContract, VideoMemberEntity, VideoMemberEventNames, VideoMemberType, VideoPlaybackEventNames, VideoPosition, VideoRecordingEventNames, } from '@signalwire/core';
/** @internal */
export declare const createVideoObject: (params: BaseComponentOptions<RealTimeVideoApiEvents>) => Video;
export * from './VideoClient';
//# sourceMappingURL=Video.d.ts.map