import type { UserOptions } from '@signalwire/core';
import type { RealTimeVideoApiEvents } from '../types';
import { Video } from './Video';
/**
 * List of events for {@link Video.Client}.
 */
export interface VideoClientApiEvents extends RealTimeVideoApiEvents {
}
export interface VideoApiFullState extends VideoClient {
}
interface VideoClient extends Video {
    new (opts: VideoClientOptions): this;
}
export interface VideoClientOptions extends Omit<UserOptions, 'host' | '_onRefreshToken' | 'token'> {
    token?: string;
}
/**
 * You can use instances of this class to subscribe to video events. Please see
 * {@link VideoClientApiEvents} for the full list of events you can subscribe
 * to.
 *
 * @param options - {@link VideoClientOptions}
 *
 * @example
 *
 * ```javascript
 * const video = new Video.Client({
 *   project: '<project-id>',
 *   token: '<project-token>'
 * })
 *
 * video.on('room.started', async (roomSession) => {
 *   console.log("Room started")
 * });
 *
 * video.on('room.ended', async (roomSession) => {
 *   console.log("Room ended")
 * });
 * ```
 */
declare const VideoClient: new (options?: VideoClientOptions | undefined) => VideoClient;
export { VideoClient as Client };
//# sourceMappingURL=VideoClient.d.ts.map