import { BaseComponentOptions, EventTransform, InternalVideoMemberEventNames, InternalVideoRoomSessionEventNames, VideoRoomAudienceCountEventNames, InternalVideoLayoutEventNames, InternalVideoRecordingEventNames, InternalVideoPlaybackEventNames, InternalVideoStreamEventNames, VideoRoomSessionContract, ConsumerContract, EntityUpdated, BaseConsumer, EventEmitter } from '@signalwire/core';
import { RealTimeRoomApiEvents } from '../types';
import { RoomSessionMember } from './RoomSessionMember';
declare type EmitterTransformsEvents = InternalVideoRoomSessionEventNames | VideoRoomAudienceCountEventNames | InternalVideoMemberEventNames | InternalVideoLayoutEventNames | InternalVideoRecordingEventNames | 'video.__local__.recording.start' | InternalVideoPlaybackEventNames | 'video.__local__.playback.start' | InternalVideoStreamEventNames | 'video.__local__.stream.start';
export interface RoomSession extends VideoRoomSessionContract, ConsumerContract<RealTimeRoomApiEvents, RoomSessionFullState> {
}
export declare type RoomSessionUpdated = EntityUpdated<RoomSession>;
export interface RoomSessionFullState extends Omit<RoomSession, 'members'> {
    /** List of members that are part of this room session */
    members?: RoomSessionMember[];
}
export declare class RoomSessionConsumer extends BaseConsumer<RealTimeRoomApiEvents> {
    protected _eventsPrefix: "video";
    /** @internal */
    protected subscribeParams: {
        get_initial_state: boolean;
    };
    /** @internal */
    private debouncedSubscribe;
    constructor(options: BaseComponentOptions<RealTimeRoomApiEvents>);
    /** @internal */
    protected _internal_on(event: keyof RealTimeRoomApiEvents, fn: EventEmitter.EventListener<RealTimeRoomApiEvents, any>): EventEmitter<RealTimeRoomApiEvents, any>;
    on(event: keyof RealTimeRoomApiEvents, fn: EventEmitter.EventListener<RealTimeRoomApiEvents, any>): EventEmitter<RealTimeRoomApiEvents, any>;
    once(event: keyof RealTimeRoomApiEvents, fn: EventEmitter.EventListener<RealTimeRoomApiEvents, any>): EventEmitter<RealTimeRoomApiEvents, any>;
    /**
     * @privateRemarks
     *
     * Override BaseConsumer `subscribe` to resolve the promise when the 'room.subscribed'
     * event comes. This way we can return to the user the room full state.
     * Note: the payload will go through an EventTrasform - see the `type: roomSessionSubscribed`
     * below.
     */
    subscribe(): Promise<unknown>;
    /** @internal */
    protected getCompoundEvents(): Map<any, any>;
    /** @internal */
    protected getEmitterTransforms(): Map<EmitterTransformsEvents | EmitterTransformsEvents[], EventTransform>;
}
export declare const RoomSessionAPI: import("@signalwire/core").ConstructableType<RoomSessionConsumer>;
export declare const createRoomSessionObject: (params: BaseComponentOptions<EmitterTransformsEvents>) => RoomSession;
export {};
//# sourceMappingURL=RoomSession.d.ts.map